var enioka = (enioka || {});

enioka.ij = (
    function (eniokaij) {
        /**
         * @class
         * @memberof enioka.ij
         * @classdesc Will handle rendering with two modules : 
         *                    -HTMLRenderer who gives a HTML value at the element of the head of columns and rows.
         *                    -HTMLEventHandler who gives a HTML class and id at the head of columns and rows.
         *            The renderer has all the specifics functions for create the Headers of the columns and rows 
         *            and access/modify HTMLclass/CSSProperty.
         * @param {object} properties
         */
        var IIJRenderer = {

            initialize : function(){
                this.renderer = new enioka.ij.HTMLRenderer();
                this.template = new enioka.ij.HTMLTemplate();
            },

            /**
             * @function
             * @description create a HTMl element of type tbody
             * @return {HTMLElement} an element with a HTML type
             */
            renderRowsContainer : function(){
            },

            /**
             *@function
             *@description add an attribute name rowspan at renderedObject with the value property
             *@param {Element} renderObject element HTML statement
             *@param {string} property value of the attribute rowspan
             *@return {Element} renderObject with a attribute rowspan
             */
            applyRowSpan : function(renderedObject, property){
            },

            /**
             *@function
             *@description add an attribute name colspan at renderedObject with the value property
             *@param {Element} renderObject element HTML statement
             *@param {string} property value of the attribute colspan
             *@return {Element} renderObject with a attribute colspan
             */
            applyColSpan : function(renderedObject, property){
            },

            /**
             * @function
             * @description return a variable where is create a new html class : tr
             * @return {HTMLElement} row containing tr
             */
            renderRowContainer : function(){
            },

            /**
             * @function
             * @description create a html class : th, with text
             * @param {string} label the text add at the html class
             * @return {HTMLElement}
             */
            renderSubTotalHeader : function(label){
            },

            

            /**
             * @function
             * @description Render Left upper corner, essential for a well displayed HTML Table
             * @return {HTMLElement}
             */
            renderLeftUpperCorner : function(){
            },

            /**
             * @function
             * @description Render Left upper corner, essential for a well displayed HTML Table
             * @return {HTMLElement}
             */
            renderColumnsLevelContainer : function(){
            },

            /**
             * @function
             * @description create an html element of type tr
             * @return {HTMLElement}
             */
            renderColumnsContainer : function(){
            },

            /**
             * @function
             * @description render container for all rendered objects. Core will put together
             * all rendered object in a sigle one ; this one.
             * @return {HTMLElement}
             */
            renderContainer : function(){
            },

            /**
             * @function
             * @description set a CSS property at an element
             * @param {string} property the CSS property
             * @param {Element} element the element which we add the property
             * @param {string} propertyValue the value of the added property
             * @retrun {Element} element the element with a new CSS property
             */
            setCSSProperty : function(property, element, propertyValue){
            },

            /**
             * @function
             * @description empty the value of a property of an element, canceled the property
             * @param {string} property the CSS property
             * @param {Element} element the element which we canceled a property
             * @return {Element} element the element with a canceled property
             */
            emptyCSSProperty : function(property, element){
            },

            /**
             * @function
             * @description recover the classPrefix of a template and give this class prefix
             * with the number of the location at the renderer
             * @param {Element} element an element categorie generated by the Renderer
             * @param {string} elementType 
             * @return {HTMLElement}
             */
            addClasses : function(element, elementType, classes){
            },


            /**
             * @function
             * @description
             * @param rendering
             * @returns {*}
             */
            getRenderingId : function(rendering){
                return rendering.id;
            },

            /**
             * @function
             * @description
             * @param rendering
             * @returns {DOMTokenList}
             */
            getRenderingClasses : function(rendering){
                return rendering.classList;
            },

            /**
             * @function
             * @description
             * @returns {Element|*}
             */
            renderRowsContainer : function(){
            },

            /**
             * @function
             * @description
             * @param rowObject
             * @param rowNumber
             * @returns {Array}
             */
            renderRow : function(rowObject, rowNumber){
            },

            /**
             * @function
             * @description
             * @param renderedObject
             * @param property
             * @returns {*}
             */
            applyRowSpan : function(renderedObject, property){
            },

            /**
             * @function
             * @descrpition
             * @param renderedObject
             * @param property
             * @returns {*}
             */
            applyColSpan : function(renderedObject, property){
            },

            /**
             * @function
             * @description
             * @returns {Element|*}
             */
            renderRowContainer : function(){
            },

            /**
             * @function
             * @descrption
             * @param label
             * @returns {*}
             */
            renderSubTotalHeader : function(label){
            },

            /**
             * @function
             * @description
             * @param columnObject
             * @param columnNumber
             * @returns {Array}
             */
            renderColumn : function(columnObject, columnNumber) {
            },

            /**
             * @function
             * @description
             * @returns {Element|*}
             */
            renderLeftUpperCorner : function(){
            },

            /**
             * @function
             * @description
             * @returns {Element|*}
             */
            renderColumnsLevelContainer : function(){
            },

            /**
             * @function
             * @description
             * @returns {Element|*}
             */
            renderColumnsContainer : function(){
            },

            /**
             * @function
             * @descrpition
             * @param renderedObject
             * @returns {*|{id, object, label, order, rendering, open, visible}}
             */
            renderSummary : function(renderedObject){
            },

            /**
             * @function
             * @description
             * @param rowsNumbers
             * @param columnsNumbers
             * @param cellData
             * @param eventsCallBacks
             * @returns {*}
             */
            renderCell : function(rowsNumbers, columnsNumbers, cellData, eventsCallBacks){
            },

            /**
             * @function
             * @description
             * @param cellData
             * @returns {*}
             * @private
             */
            _getSummaryHoverCell : function(cellData){
            },

            /**
             * @function
             * @description
             * @param element
             * @param child
             * @returns {*|Node|XML}
             */
            appendChild : function(element, child) {
            },

            /**
             * @function
             * @description
             * @returns {Element|*}
             */
            renderContainer : function(){
            },

            /**
             * @function
             * @description
             * @param property
             * @param element
             * @param propertyValue
             * @returns {*|void}
             */
            setCSSProperty : function(property, element, propertyValue){
            },

            /**
             * @function
             * @description
             * @param property
             * @param element
             * @returns {*|void}
             */
            emptyCSSProperty : function(property, element){
            },

            /**
             * @function
             * @description
             * @param element
             * @param elementType
             * @param classes
             * @returns {*}
             */
            addClasses : function(element, elementType, classes){
            },

            /**
             * @function
             * @description
             * @param element
             * @param id
             * @returns {*}
             */
            setId : function(element, id){
            },

            /**
             * @function
             * @description
             * @param type
             * @returns {*|string}
             */
            getClassPrefix : function(type){
            },

            /**
             * @function
             * @description
             * @param type
             * @returns {*|string}
             */
            getIdPrefix : function(type){
            },

            /**
             * @function
             * @description add eventsListeners for the rendering
             * @param rendering {object}
             * @param events {object} containing events available for the rendering following this partern :
             *  - eventName : event
             * @returns {Node|*}
             */
            addEventsToRendering : function(rendering, events){
            },

            /**
             * @function
             * @description clear output (DOM element or buffer)
             * @param output {Object}
             */
            clearOutput : function(output) {
            }
        };
        //Instanciate the IMatrixRenderer Class into an object
        IIJRenderer = Class.create(IIJRenderer);

        eniokaij.IIJRenderer = IIJRenderer;


        return eniokaij;
    }(enioka.ij || {})
);
